1. What are escape characters, and how do you use them?

Escape characters: Escape characters are special characters used in strings to represent characters that are difficult or impossible to type directly, such as newline, tab, or backslash. 
They are preceded by a backslash () to indicate that the following character should be treated differently.

2. What do the escape characters n and t stand for?

\n: Represents a newline character, causing the text following it to start on a new line.
\t: Represents a tab character, causing the text following it to be indented as if by a tab space.

3. What is the way to include backslash characters in a string?

Including backslash characters: To include a backslash character in a string, you need to escape it by typing two backslashes (\\). For example, "C:\\Windows\\System32" represents the file path "C:\Windows\System32"

4. The string &quot;Howl&#39;s Moving Castle&quot; is a correct value. Why isn&#39;t the single quote character in the
word Howl&#39;s not escaped a problem?

Escaping single quote character: In Python, single quotes (') and double quotes (") can be used interchangeably to delimit strings. 
Therefore, if a string contains a single quote character, it can be enclosed in double quotes without any problem, and vice versa. In the given example, "Howl's Moving Castle" uses double quotes to delimit the string,
so the single quote inside the string does not need to be escaped.

5. How do you write a string of newlines if you dont want to use the n character?

multiline_string = """This is line 1.
This is line 2.
This is line 3."""

6. What are the values of the given expressions?
&#39;Hello, world!&#39;[1]
&#39;Hello, world!&#39;[0:5]
&#39;Hello, world!&#39;[:5]
&#39;Hello, world!&#39;[3:]

'Hello, world!'[1]: Returns the character at index 1, which is 'e'.
'Hello, world!'[0:5]: Returns the substring from index 0 to index 4 (exclusive), which is 'Hello'.
'Hello, world!'[:5]: Returns the substring from the beginning to index 4 (exclusive), which is 'Hello'.
'Hello, world!'[3:]: Returns the substring from index 3 to the end, which is 'lo, world!'

7. What are the values of the following expressions?
&#39;Hello&#39;.upper()
&#39;Hello&#39;.upper().isupper()
&#39;Hello&#39;.upper().lower()

'Hello'.upper(): Returns the string 'HELLO'.
'Hello'.upper().isupper(): Returns True because the entire string is uppercase.
'Hello'.upper().lower(): Returns the string 'hello' after converting it to lowercase.

8. What are the values of the following expressions?
&#39;Remember, remember, the fifth of July.&#39;.split()
&#39;-&#39;.join(&#39;There can only one.&#39;.split())

'Remember, remember, the fifth of July.'.split(): Splits the string into a list of words based on whitespace characters. Returns ['Remember,', 'remember,', 'the', 'fifth', 'of', 'July.'].
'-'.join('There can only one.'.split()): Splits the string into a list of words based on whitespace characters, then joins them back together with hyphens - between each word. Returns 'There-can-only-one.'.
String justification methods:

9. What are the methods for right-justifying, left-justifying, and centering a string?

rjust(width, fillchar): Right-justifies the string within a field of the specified width, padding the left side with the specified fill character.
ljust(width, fillchar): Left-justifies the string within a field of the specified width, padding the right side with the specified fill character.
center(width, fillchar): Centers the string within a field of the specified width, padding both sides with the specified fill character.

10. What is the best way to remove whitespace characters from the start or end?

Removing whitespace: The strip() method is commonly used to remove leading and trailing whitespace characters from a string. 
Alternatively, you can use lstrip() to remove leading whitespace or rstrip() to remove trailing whitespace.
