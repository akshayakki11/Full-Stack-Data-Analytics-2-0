1.How many seconds are in an hour? Use the interactive interpreter as a calculator and multiply the
number of seconds in a minute (60) by the number of minutes in an hour (also 60).
Calculating Seconds in an Hour:


seconds_in_minute = 60  # Number of seconds in a minute
minutes_in_hour = 60  # Number of minutes in an hour

seconds_per_hour = seconds_in_minute * minutes_in_hour

print("There are", seconds_per_hour, "seconds in an hour.")

2. Assign the result from the previous task (seconds in an hour) to a variable called
seconds_per_hour.
 Assigning Seconds per Hour:

We've already assigned the result (3600) to the variable seconds_per_hour in the previous step.

3. How many seconds do you think there are in a day? Make use of the variables seconds per hour
and minutes per hour.
 Estimating Seconds in a Day:

There are 24 hours in a day. Using seconds_per_hour:


estimated_seconds_per_day = seconds_per_hour * 24
print("Estimated seconds in a day (using hours):", estimated_seconds_per_day)

4. Calculate seconds per day again, but this time save the result in a variable called seconds_per_day
Calculating Seconds per Day Accurately:

There are also 60 minutes in an hour. Using both factors:

seconds_per_day = seconds_per_hour * minutes_in_hour * 24
print("Actual seconds in a day:", seconds_per_day)

5. Divide seconds_per_day by seconds_per_hour. Use floating-point (/) division.

Floating-Point vs. Integer Division:

hours_in_day = seconds_per_day / seconds_per_hour  # Floating-point division
print("Hours in a day (floating-point):", hours_in_day)

6. Divide seconds_per_day by seconds_per_hour, using integer (//) division. Did this number agree
with the floating-point value from the previous question, aside from the final .0?


days_in_hour = seconds_per_day // seconds_per_hour 
print("Days in an hour (integer):", days_in_hour)  
# Output: 24

7. Write a generator, genPrimes, that returns the sequence of prime numbers on successive calls to
its next() method: 2, 3, 5, 7, 11, ...

 Prime Number Generator (Using a Function for Better Readability):

Python
def genPrimes():
    """
    Generates the sequence of prime numbers on successive calls.

    Yields:
        int: The next prime number in the sequence.
    """
    primes = []  # List to store found primes
    num = 2  # Start with 2, the first prime number

    while True:
        # Check if num is prime
        if all(num % p != 0 for p in primes):
            yield num
            primes.append(num)
        num += 1

prime_generator = genPrimes()  # Create a generator object
print("First few prime numbers:", next(prime_generator), next(prime_generator), next(prime_generator), next(prime_generator), next(prime_generator))  # Print first five primes
