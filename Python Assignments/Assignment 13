1. What advantages do Excel spreadsheets have over CSV spreadsheets?
Formatting: Excel offers rich formatting options for cells (fonts, colors, borders, alignment), making data presentation more visually appealing and informative.
Functions and Formulas: Excel includes a vast array of built-in functions for calculations, data manipulation, and analysis, automating tasks and simplifying complex computations.
Charts and Graphs: Excel excels at creating various types of charts and graphs, enabling you to visualize data trends and patterns effectively.
Data Validation: Excel allows you to set rules for data entry, ensuring consistency and reducing errors.
PivotTables and Slicers: PivotTables provide powerful data summarization and filtering capabilities, making it easier to explore relationships within your spreadsheet.
Macros and Automation: Excel supports macros (recorded sets of instructions) and automation tools like VBA for repetitive tasks, enhancing efficiency.
However, CSV spreadsheets have their own advantages:

Simplicity: CSV files are plain text files, making them easy to open and edit with almost any text editor or spreadsheet program.
Smaller File Size: Due to their simple structure, CSV files are generally smaller than Excel files, facilitating easier storage and transmission.
Cross-Platform Compatibility: CSV format is universally recognized across different platforms and applications, making data interchange seamless.

2.What do you pass to csv.reader() and csv.writer() to create reader and writer objects?
csv.reader() takes an iterable object (usually a file object) as input to create a reader object.
csv.writer() takes an iterable object (usually a file object) and an optional dictionary for delimiters and line terminators to create a writer object.

3. What modes do File objects for reader and writer objects need to be opened in?

Reader Objects: Open the file object in read mode ('r').
Writer Objects: Open the file object in write mode ('w') or append mode ('a') depending on your purpose.

4. What method takes a list argument and writes it to a CSV file?
Use the writerow() method of the writer object, passing the list as an argument

import csv

with open('data.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    data_to_write = ['Name', 'Age', 'City']
    writer.writerow(data_to_write)  # Write header row
    data_rows = [
        ['Alice', 30, 'New York'],
        ['Bob', 25, 'London'],
        ['Charlie', 42, 'Paris']
    ]
    writer.writerows(data_rows)  # Write multiple rows

5. What do the keyword arguments delimiter and line terminator do?
delimiter (default: ','): Specifies the character used to separate values within a row (e.g., comma, semicolon, tab).
line terminator (default: '\n'): Defines the character(s) used to end a line (e.g., newline, carriage return).

6. What function takes a string of JSON data and returns a Python data structure?
Use the json.loads() function from the json module.

import json

json_data = '{"name": "John Doe", "age": 35, "city": "San Francisco"}'
python_data = json.loads(json_data)
print(python_data)  # Output: {'name': 'John Doe', 'age': 35, 'city': 'San Francisco'}

7. What function takes a Python data structure and returns a string of JSON data?
Use the json.dumps() function from the json module.

python_data = {"name": "Jane Doe", "age": 28, "city": "Los Angeles"}
json_string = json.dumps(python_data)
print(json_string)  # Output: '{"name": "Jane Doe", "age": 28, "city": "Los Angeles"}'
