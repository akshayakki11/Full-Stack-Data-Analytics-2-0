1. In what modes should the PdfFileReader() and PdfFileWriter() File objects will be opened?
File Opening Modes:

PdfFileReader: Open in binary read mode ('rb').
PdfFileWriter: Open in binary write mode ('wb').

2. From a PdfFileReader object, how do you get a Page object for page 5?

Getting a Page Object:
Use the getPage() method on a PdfFileReader object, passing the zero-based page index (page 5 translates to index 4)

3. What PdfFileReader variable stores the number of pages in the PDF document?
pdf_reader = PdfFileReader(open('my_pdf.pdf', 'rb'))
page_5 = pdf_reader.getPage(4)

4. If a PdfFileReader object’s PDF is encrypted with the password swordfish, what must you do
before you can obtain Page objects from it?
Encrypted PDF:

If the PDF is password-protected, you need to provide the password when creating the PdfReader object using the password argument
pdf_reader = PdfFileReader(open('encrypted.pdf', 'rb'), password='swordfish')
Use code with caution.


5. What methods do you use to rotate a page?
age Rotation (PyPDF2 doesn't support direct rotation):

Unfortunately, PyPDF2 doesn't have built-in methods for page rotation. You might need to explore third-party libraries or alternative approaches like creating a new PDF with rotated pages.

6. What is the difference between a Run object and a Paragraph object?
 Run vs. Paragraph (Assuming ReportLab):

Run: Represents a single text segment with formatting attributes like font, size, and color.
Paragraph: Groups multiple Run objects together to form a cohesive paragraph with alignment and spacing properties.

7. How do you obtain a list of Paragraph objects for a Document object that’s stored in a variable
named doc?
List of Paragraphs (Assuming ReportLab):

If you're using ReportLab, the specific method depends on the document structure. Here are a couple of possibilities:

For a single-paragraph document:

paragraphs = doc.getStory()  # Assuming doc is a ReportLab document

For a document with multiple top-level elements:
You might need to iterate through the document's structure to extract paragraphs.

8. What type of object has bold, underline, italic, strike, and outline variables?
Text Formatting Properties:

These properties (bold, underline, italic, strike, outline) are typically attributes of a Run object (assuming ReportLab).

9. What is the difference between False, True, and None for the bold variable?
Bold Variable Values:

The values for bold can vary depending on the library:

True: Makes the text bold.
False: Makes the text normal (not bold).
None: Inherits the bold formatting from the parent element (if applicable).

10. How do you create a Document object for a new Word document?
Creating a New Word Document (Limited Options with Python):

Pure Python libraries have limited Word document creation capabilities. Here are some potential approaches:

ReportLab (partial support): Can create documents with basic text formatting and layout, but not full-fledged Word features.
Third-party libraries: Explore libraries like docx or python-docx that provide more comprehensive Word document creation functionalities.

11. How do you add a paragraph with the text &#39;Hello, there!&#39; to a Document object stored in a
variable named doc?
Adding a Paragraph (Assuming ReportLab):

Create a Paragraph object with the desired text and add it to the document's story:

from reportlab.lib import styles
from reportlab.platypus import Paragraph

paragraph = Paragraph("Hello, there!", styles.Normal)
doc.append(paragraph)

12. What integers represent the levels of headings available in Word documents?
Heading Levels:

Heading levels in Word documents are typically represented by integers:

0: Normal text
1: Heading 1
2: Heading 2
...
9: Heading 9
While these answers assume ReportLab for text formatting, the concepts and approaches can be adapted to other Python libraries for PDF or Word document manipulation. Remember to check the specific library's documentation for available features and methods.


